apiVersion: v1
items:
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: mongodb
    name: mongodb
  spec:
    clusterIP: None
    ports:
    - name: headless
      port: 55555
      targetPort: 0
    selector:
      io.kompose.service: mongodb
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.service.type: nodeport
    creationTimestamp: null
    labels:
      io.kompose.service: myapp
    name: myapp
  spec:
    ports:
    - name: "3000"
      port: 3000
      targetPort: 3000
    selector:
      io.kompose.service: myapp
    type: NodePort
  status:
    loadBalancer: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    creationTimestamp: null
    name: mongodb
  spec:
    replicas: 1
    strategy: {}
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: mongodb
      spec:
        containers:
        - image: bitnami/mongodb:latest
          name: mongodb
          resources: {}
        restartPolicy: Always
  status: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.service.type: nodeport
    creationTimestamp: null
    name: myapp
  spec:
    replicas: 1
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: myapp
      spec:
        containers:
        - args:
          - npm
          - run
          - development
          env:
          - name: PORT
            value: "3000"
          - name: NODE_ENV
            value: development
          - name: DATABASE_URL
            value: mongodb://mongodb:27017/myapp
          - name: SKIP_DB_WAIT
            value: "0"
          - name: SKIP_DB_MIGRATION
            value: "0"
          - name: SKIP_NPM_INSTALL
            value: "0"
          - name: SKIP_BOWER_INSTALL
            value: "0"
          image: bitnami/express:latest
          name: myapp
          ports:
          - containerPort: 3000
          resources: {}
          tty: true
          volumeMounts:
          - mountPath: /app
            name: .
        restartPolicy: Always
        volumes:
        - name: .
          persistentVolumeClaim:
            claimName: .
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: .
    name: .
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
kind: List
metadata: {}

