name: '[CI/CD] CD Pipeline Run'
on: # rebuild any PRs and main branch changes
  workflow_run:
    workflows:
      - '\[CI/CD\] CD Pipeline Prepare'
    types:
      - 'completed'
permissions:
  actions: read
env:
  CSP_API_URL: https://console.cloud.vmware.com
  CSP_API_TOKEN: ${{ secrets.CSP_API_TOKEN }}
  VIB_PUBLIC_URL: https://cp.bromelia.vmware.com
jobs:
  get-metadata:
    runs-on: ubuntu-latest
    name: Get modified containers path
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    outputs:
      package_url: ${{ steps.get-artifacts.outputs.package_url }}
      containers: ${{ steps.get-artifacts.outputs.containers }}
      marketplace_user: ${{ steps.get-registry-credentials.outputs.marketplace_user }}
      marketplace_passwd: ${{ steps.get-registry-credentials.outputs.marketplace_passwd }}
    steps:
      - id: get-artifacts
        name: Get modified containers path
        env:
          PREPARE_WORKFLOW_ARTIFACTS_URL: ${{ github.event.workflow_run.artifacts_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -sSL -o artifacts.json -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" -H "Authorization: Bearer $GITHUB_TOKEN" $PREPARE_WORKFLOW_ARTIFACTS_URL
          PUBLISH_METADATA_URL="$(jq -r '.artifacts[] | select(.name == "publish-metadata.json") | .archive_download_url' artifacts.json)"
          curl -sSL -o publish-metadata.json.zip -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" -H "Authorization: Bearer $GITHUB_TOKEN" $PUBLISH_METADATA_URL
          unzip publish-metadata.json.zip
          containers=$(cat publish-metadata.json | jq -c)
          PACKAGE_URL="$(jq -r '.artifacts[] | select(.name == "package.tgz") | .archive_download_url' artifacts.json)"
          echo "package_url=${PACKAGE_URL}" >> $GITHUB_OUTPUT
          echo "containers=${containers}" >> $GITHUB_OUTPUT
      - id: get-registry-credentials
        name: Get marketplace's registry credentials
        if: ${{ steps.get-artifacts.output.package_url != '' }}
        run: |
          # csp_auth_token=$(curl -s -H 'Content-Type: application/x-www-form-urlencoded' -X POST -d "grant_type=refresh_token&api_token=${{ secrets.PROD_MARKETPLACE_API_TOKEN }}" https://console.cloud.vmware.com/csp/gateway/am/api/auth/api-tokens/authorize | jq -re .access_token)
          # repo_info=$(curl -s -X POST -H "Content-Type: application/json" -H "csp-auth-token:$csp_auth_token" -d '{"withCredentials":true, "storageType":"OCI"}' https://gtw.marketplace.cloud.vmware.com/api/v1/repositories/transient)
          marketplace_user=$(echo "$repo_info" | jq -re .response.repodetails.username)
          marketplace_passwd=$(echo "$repo_info" | jq -re .response.repodetails.token)
          echo "::add-mask::${marketplace_user}"
          echo "::add-mask::${marketplace_passwd}"
          echo "marketplace_user=${marketplace_user}" >> $GITHUB_OUTPUT
          echo "marketplace_passwd=${marketplace_passwd}" >> $GITHUB_OUTPUT

  vib-publish:
    runs-on: ubuntu-latest
    needs: get-metadata
    name: Publish
    strategy:
      fail-fast: false
      max-parallel: 2
      matrix:
        container: ${{ fromJSON(needs.get-metadata.outputs.containers) }}
    steps:
      - id: checkout-packages
        name: Checkout Packages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -sSL -o /tmp/package.zip -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" -H "Authorization: Bearer $GITHUB_TOKEN" "${PACKAGE_URL}"
          unzip /tmp/package.zip
      - id: get-dsl-filepath
        name: Get pipeline DSL filepath
        env:
          CONTAINER_NAME: ${{ matrix.container.name }}
          CONTAINER_BRANCH: ${{ matrix.container.branch }}
        run: |
          dsl_path="${CONTAINER_NAME}"
          if [[ -d ".vib/${dsl_path}/${CONTAINER_BRANCH}" ]]; then
            dsl_path="${dsl_path}/${CONTAINER_BRANCH}"
          fi
          echo "dsl_path=${dsl_path}" >> $GITHUB_OUTPUT
      - uses: vmware-labs/vmware-image-builder-action@main
        name: 'Publish ${{ matrix.container.name }}: ${{ matrix.container.tag }}'
        with:
          pipeline: ${{ steps.get-dsl-filepath.outputs.dsl_path }}/vib-publish.json
        env:
          # Path with docker resources
          VIB_ENV_PATH:  "${{ matrix.container.path }}"
          # Container name
          VIB_ENV_CONTAINER: "${{ matrix.container.name }}"
          VIB_ENV_ARCHIVE: "${{ needs.get-metadata.outputs.package_url }}"
          VIB_ENV_REPOSITORY_URL: "${{ github.event.workflow_run.repository.url }}"
          VIB_ENV_GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          VIB_ENV_TAG: "${{ matrix.container.tag }}"
          VIB_ENV_ROLLING_TAGS: "${{ toJSON(matrix.container.rolling_tags) }}"
          VIB_ENV_REGISTRY_URL: "${{ secrets.PROD_MARKETPLACE_REGISTRY_URL }}"
          VIB_ENV_REGISTRY_USERNAME: "${{ needs.get-metadata.outputs.marketplace_user }}"
          VIB_ENV_REGISTRY_PASSWORD: "${{ needs.get-metadata.outputs.marketplace_passwd }}"